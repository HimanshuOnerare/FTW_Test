{"version":3,"file":"static/js/310.4c2e78f8.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/phantom-adapter/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = typeof CHAIN_NAMESPACES[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = typeof ADAPTER_NAMESPACES[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = typeof WALLET_ADAPTERS[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = typeof SOLANA_ADAPTERS[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = typeof EVM_ADAPTERS[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = typeof MULTI_CHAIN_ADAPTERS[keyof typeof MULTI_CHAIN_ADAPTERS];\n","import type { OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = typeof ADAPTER_CATEGORY[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = typeof ADAPTER_STATUS[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setChainConfig(customChainConfig: CustomChainConfig): void;\n  setAdapterSettings(adapterSettings: unknown): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  // should be added in constructor or from setChainConfig function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract clientId: string;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = { ...defaultChainConfig, ...customChainConfig };\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n    if (!this.clientId) throw WalletLoginError.connectionError(\"Please initialize Web3Auth with a valid clientId in constructor\");\n  }\n\n  checkInitializationRequirements(): void {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions) {\n    super(options);\n    this.chainConfig = options?.chainConfig || null;\n    this.sessionTime = options?.sessionTime || 86400;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["CHAIN_NAMESPACES","ADAPTER_NAMESPACES","getChainConfig","chainNamespace","chainId","finalChainId","parseInt","Error","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","_inherits","code","message","_classCallCheck","_this","_defineProperty","Object","defineProperty","_assertThisInitialized","value","_createClass","key","name","this","JSON","stringify","toJSON","CustomError","WalletInitializationError","_this2","extraMessage","messages","fromCode","WalletLoginError","_this3","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","TORUS_SOLANA","PHANTOM","SOLLET","SOLLET_EXTENSION","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","WALLET_ADAPTERS","ADAPTER_CATEGORY","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","ADAPTER_DATA_UPDATED","SafeEventEmitter","loglevel","poll","callback","interval","count","Promise","resolve","reject","setTimeout","_asyncToGenerator","_context","done","then","res","catch","err","detectProvider","_ref2","_args2","options","window","solana","isPhantom","_context2","_window$solana2","PhantomAdapter","_wallet","off","_onDisconnect","rehydrated","status","emit","chainConfig","sessionTime","get","isConnected","provider","phantomProvider","set","_","clientId","_get","notInstalled","PhantomInjectedProvider","config","log","debug","autoConnect","connect","error","_connect","_context3","adapter","handleDisconnect","_handleDisconnect","_ref","connectWithProvider","once","windowClosed","args","apply","reason","connectionError","publicKey","on","_disconnect","_this$_wallet2","_args4","cleanup","_context4","disconnect","disconnectionError","_getUserInfo","isWalletConnected","_context5","notConnectedError","injectedProvider","_context6","setupProvider","reconnected","BaseSolanaAdapter"],"sourceRoot":""}